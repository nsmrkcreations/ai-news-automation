"""
Test utilities and fixtures
"""
import os
import json
import shutil
from datetime import datetime, timedelta
from typing import Dict, Any, List
import pytest
from unittest.mock import MagicMock

def create_test_article(
    title: str = "Test Article",
    category: str = "technology",
    is_breaking: bool = False,
    source_name: str = "Test Source"
) -> Dict[str, Any]:
    """Create a test article with default values"""
    return {
        'title': title,
        'description': f"Description for {title}",
        'url': f"http://test.com/{title.lower().replace(' ', '-')}",
        'urlToImage': 'http://test.com/image.jpg',
        'publishedAt': (datetime.now() - timedelta(hours=1 if is_breaking else 24)).isoformat(),
        'source': {
            'id': 'test-source',
            'name': source_name
        },
        'content': f"Full content for {title}",
        'category': category,
        'author': 'Test Author',
        'isBreaking': is_breaking
    }

def create_test_dataset(num_articles: int = 5) -> List[Dict[str, Any]]:
    """Create a test dataset with multiple articles"""
    categories = ['technology', 'business', 'science', 'world', 'general']
    return [
        create_test_article(
            title=f"Test Article {i}",
            category=categories[i % len(categories)],
            is_breaking=(i % 4 == 0)  # Every 4th article is breaking news
        )
        for i in range(num_articles)
    ]

@pytest.fixture
def test_cache_dir(tmp_path):
    """Create a temporary cache directory"""
    cache_dir = tmp_path / "test_cache"
    cache_dir.mkdir()
    yield str(cache_dir)
    # Cleanup after tests
    shutil.rmtree(str(cache_dir))

@pytest.fixture
def mock_news_api_response():
    """Create a mock NewsAPI response"""
    return {
        'status': 'ok',
        'totalResults': 5,
        'articles': create_test_dataset()
    }

@pytest.fixture
def mock_ollama_response():
    """Create a mock Ollama API response"""
    return {
        'response': 'Test summary generated by mock Ollama',
        'context': [],
        'done': True
    }

@pytest.fixture
def setup_test_env(monkeypatch):
    """Setup test environment variables"""
    test_env = {
        'NEWS_API_KEY': 'test_api_key',
        'OLLAMA_MODEL': 'test_model',
        'CACHE_DIR': 'test_cache',
        'NEWS_API_RATE_LIMIT_CALLS': '100',
        'NEWS_API_RATE_LIMIT_WINDOW': '86400'
    }
    for key, value in test_env.items():
        monkeypatch.setenv(key, value)
    return test_env

class MockResponse:
    """Mock HTTP response"""
    def __init__(self, json_data: Dict[str, Any], status_code: int = 200):
        self.json_data = json_data
        self.status_code = status_code
        self.ok = status_code < 400

    def json(self):
        return self.json_data

    def raise_for_status(self):
        if not self.ok:
            raise Exception(f"HTTP {self.status_code}")

def assert_valid_article(article: Dict[str, Any]) -> None:
    """Assert that an article has all required fields"""
    required_fields = [
        'title', 'description', 'url', 'urlToImage',
        'publishedAt', 'source', 'content', 'category', 'author'
    ]
    
    for field in required_fields:
        assert field in article, f"Missing required field: {field}"
    
    # Check source structure
    assert isinstance(article['source'], dict), "Source must be a dictionary"
    assert 'name' in article['source'], "Source must have 'name' field"
    
    # Check types
    assert isinstance(article['title'], str)
    assert isinstance(article['description'], str)
    assert article['url'].startswith('http')
    assert article['publishedAt'].endswith('Z')  # Should be in ISO format
    assert isinstance(article['category'], str), "Category must be a string"
    assert isinstance(article['author'], str)
    assert isinstance(article['isBreaking'], bool)

def assert_valid_article_list(articles: List[Dict[str, Any]]):
    """Assert that a list of articles is valid"""
    assert isinstance(articles, list)
    for article in articles:
        assert_valid_article(article)
